google_overall <- read.csv("/Users/elliebloom/Desktop/Masters/Project/Data/Google/google_overall.csv")
# Converting dates from string format to date
str(google_overall$date) # Dates are currently stored as characters
google_overall$date <- as.Date(google_overall$date,format="%Y-%m-%d")
str(google_overall$date)
# Adding bank holidays as a field - ref: https://www.gov.uk/bank-holidays
bank_holidays <-as.Date(c("2020-01-01","2020-04-10","2020-04-13","2020-05-08",
"2020-05-25","2020-08-31","2020-12-25","2020-12-28",
"2021-01-01","2021-04-02","2021-04-05","2021-05-03",
"2021-05-31","2021-08-30","2021-12-27","2021-12-28",
"2022-01-03","2022-04-15","2022-04-18","2022-05-02"),
"%Y-%m-%d")
google_overall$bank_holiday <- ifelse(google_overall$date %in% bank_holidays,1,0)
google_overall$bank_holiday <- as.factor(google_overall$bank_holiday)
google_overall <- google_overall %>%
mutate(date=ymd(date)) %>%
as_tsibble()
library(fpp3)
install.packages("fpp3")
library(fpp3)
google_overall <- google_overall %>%
mutate(date=ymd(date)) %>%
as_tsibble()
google_overall <- google_overall %>%
mutate(date=ymd(date)) %>%
as_tsibble(index=date)
colnames(google_overall)
dput(colnames(google_overall))
google_overall
google_overall <- read.csv("/Users/elliebloom/Desktop/Masters/Project/Data/Google/google_overall.csv")
# Converting dates from string format to date
str(google_overall$date) # Dates are currently stored as characters
google_overall$date <- as.Date(google_overall$date,format="%Y-%m-%d")
str(google_overall$date)
# Adding bank holidays as a field - ref: https://www.gov.uk/bank-holidays
england_sub_region_1 <- c("Bath and North East Somerset","Bedford", "Blackburn with Darwen",
"Blackpool", "Borough of Halton","Bracknell Forest","Brighton and Hove",
"Bristol City","Buckinghamshire","Cambridgeshire","Central Bedfordshire",
"Cheshire East","Cheshire West and Chester","Cornwall","County Durham",
"Cumbria", "Darlington","Derby","Derbyshire","Devon", "Dorset",
"East Riding of Yorkshire", "East Sussex", "Essex","Gloucestershire",
"Greater London","Greater Manchester","Hampshire" , "Hartlepool",
"Herefordshire", "Isle of Wight", "Kent", "Kingston upon Hull",
"Lancashire", "Leicester","Leicestershire", "Lincolnshire","Luton",
"Medway", "Merseyside", "Middlesbrough","Milton Keynes", "Norfolk",
"North East Lincolnshire", "North Lincolnshire", "North Somerset",
"North Yorkshire", "Northamptonshire", "Northumberland", "Nottingham",
"Nottinghamshire", "Oxfordshire", "Peterborough", "Plymouth","Portsmouth",
"Reading", "Redcar and Cleveland", "Rutland", "Shropshire", "Slough",
"Somerset", "South Gloucestershire", "South Yorkshire", "Southampton",
"Southend-on-Sea", "Staffordshire", "Stockton-on-Tees", "Stoke-on-Trent",
"Suffolk", "Surrey", "Swindon", "Thurrock", "Torbay","Tyne and Wear",
"Warrington", "Warwickshire", "West Berkshire", "West Midlands",
"West Sussex", "West Yorkshire", "Wiltshire", "Windsor and Maidenhead",
"Wokingham", "Worcestershire","York")
google_england <- google_overall %>% filter(sub_region_1 %in% england_sub_region_1) %>% filter(sub_region_2 == "") # Blank sub_region_2 means at the overall level only
table(google_england$sub_region_1)
google_england <- google_overall %>% filter(sub_region_1 %in% england_sub_region_1) %>% filter(sub_region_2 == "") # Blank sub_region_2 means at the overall level only
# Converting to tstibble (time series tibble) -----------------------------
google_london <- google_overall %>%
filter(sub_region_1=="Greater London")
mutate(date=ymd(date)) %>%
as_tsibble(key=c("date","workplaces_percent_change_from_baseline"),
index=date)
google_london <- google_overall %>%
filter(sub_region_1=="Greater London")
google_london
google_london <- google_overall %>%
filter(sub_region_1=="Greater London")
mutate(date=ymd(date)) %>%
as_tsibble(key=c("workplaces_percent_change_from_baseline"),
index=date)
google_london <- google_overall %>%
filter(sub_region_1=="Greater London")
mutate(date=ymd(date)) %>%
as_tsibble(index=date)
google_london <- google_overall %>%
filter(sub_region_1=="Greater London") %>%
mutate(date=ymd(date)) %>%
as_tsibble(index=date)
google_london <- google_overall %>%
mutate(date=ymd(date)) %>%
as_tsibble(key=c(sub_region_1),index=date)
google_london <- google_overall %>%
mutate(Date=ymd(Date)) %>%
select(-date)
as_tsibble(key=c(sub_region_1),index=Date)
google_london <- google_overall %>%
mutate(Date=ymd(Date)) %>%
select(-date)
as_tsibble(key='sub_region_1',index=Date)
google_london <- google_overall %>%
mutate(Date=ymd(Date)) %>%
select(-date) %>%
as_tsibble(key='sub_region_1',index=Date)
google_london <- google_england %>%
mutate(Date=ymd(Date)) %>%
select(-date) %>%
as_tsibble(key='sub_region_1',index=Date)
str(google_england$date)
google_london <- google_england %>%
as_tsibble(key='sub_region_1',index=date)
google_london
google_england_tibble <- google_england %>%
as_tsibble(key='sub_region_1',index=date)
Setup
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(tidyverse)
library(fpp3)
# Loading Google data
google_overall <- read.csv("/Users/elliebloom/Desktop/Masters/Project/Data/Google/google_overall.csv")
# Converting dates from string format to date
str(google_overall$date) # Dates are currently stored as characters
google_overall$date <- as.Date(google_overall$date,format="%Y-%m-%d")
str(google_overall$date)
# Adding bank holidays as a field - ref: https://www.gov.uk/bank-holidays
england_sub_region_1 <- c("Bath and North East Somerset","Bedford", "Blackburn with Darwen",
"Blackpool", "Borough of Halton","Bracknell Forest","Brighton and Hove",
"Bristol City","Buckinghamshire","Cambridgeshire","Central Bedfordshire",
"Cheshire East","Cheshire West and Chester","Cornwall","County Durham",
"Cumbria", "Darlington","Derby","Derbyshire","Devon", "Dorset",
"East Riding of Yorkshire", "East Sussex", "Essex","Gloucestershire",
"Greater London","Greater Manchester","Hampshire" , "Hartlepool",
"Herefordshire", "Isle of Wight", "Kent", "Kingston upon Hull",
"Lancashire", "Leicester","Leicestershire", "Lincolnshire","Luton",
"Medway", "Merseyside", "Middlesbrough","Milton Keynes", "Norfolk",
"North East Lincolnshire", "North Lincolnshire", "North Somerset",
"North Yorkshire", "Northamptonshire", "Northumberland", "Nottingham",
"Nottinghamshire", "Oxfordshire", "Peterborough", "Plymouth","Portsmouth",
"Reading", "Redcar and Cleveland", "Rutland", "Shropshire", "Slough",
"Somerset", "South Gloucestershire", "South Yorkshire", "Southampton",
"Southend-on-Sea", "Staffordshire", "Stockton-on-Tees", "Stoke-on-Trent",
"Suffolk", "Surrey", "Swindon", "Thurrock", "Torbay","Tyne and Wear",
"Warrington", "Warwickshire", "West Berkshire", "West Midlands",
"West Sussex", "West Yorkshire", "Wiltshire", "Windsor and Maidenhead",
"Wokingham", "Worcestershire","York")
google_england <- google_overall %>% filter(sub_region_1 %in% england_sub_region_1) %>% filter(sub_region_2 == "") # Blank sub_region_2 means at the overall level only
# Converting to tstibble (time series tibble) -----------------------------
google_england_tibble <- google_england %>%
as_tsibble(key='sub_region_1',index=date)
google_london_tibble %>% select(sub_region_1=="Greater London")
google_london_tibble <- google_england_tibble %>% select(sub_region_1=="Greater London")
google_england_tibble
google_london_tibble <- google_england_tibble %>% filter(sub_region_1=="Greater London")
google_london_tibble
# England regional tstibble
google_england_tibble <- google_england %>%
select(-c("sub_region_2","metro_area","census_flips_code","place_id","X"))
as_tsibble(key='sub_region_1',index=date)
# Just London tstibble
google_london_tibble <- google_england_tibble %>% filter(sub_region_1=="Greater London")
# England regional tstibble
google_england_tibble <- google_england %>%
select(-c("sub_region_2","metro_area","census_flips_code","place_id","X")) %>%
as_tsibble(key='sub_region_1',index=date)
# Just London tstibble
google_london_tibble <- google_england_tibble %>% filter(sub_region_1=="Greater London")
colnames(google_england)
google_england_tibble <- google_england %>%
select(-c("sub_region_2","metro_area","country_region","census_flips_code","place_id","X")) %>%
as_tsibble(key='sub_region_1',index=date)
# England regional tstibble
google_england_tibble <- google_england %>%
select(-c("sub_region_2","metro_area","country_region","census_fips_code","place_id","X")) %>%
as_tsibble(key='sub_region_1',index=date)
# Just London tstibble
google_london_tibble <- google_england_tibble %>% filter(sub_region_1=="Greater London")
google_london_tibble
google_england_tibble <- google_england %>%
google_england_tibble <- google_england %>%
select(-c("sub_region_2","metro_area","country_region","census_fips_code","place_id","X","iso_3166_2_code","country")) %>%
as_tsibble(key='sub_region_1',index=date)
# Just London tstibble
google_london_tibble <- google_england_tibble %>% filter(sub_region_1=="Greater London")
google_london_tibble
# England regional tstibble
google_england_tibble <- google_england %>%
select(-c("sub_region_2","metro_area","country_region","census_fips_code","place_id","X","iso_3166_2_code","country_region_code")) %>%
as_tsibble(key='sub_region_1',index=date)
# Just London tstibble
google_london_tibble <- google_england_tibble %>% filter(sub_region_1=="Greater London")
google_london_tibble
colnames(google_london_tibble)
england_tibble <- google_england %>%
select(-c("sub_region_2","metro_area","country_region","census_fips_code","place_id","X","iso_3166_2_code","country_region_code")) %>%
as_tsibble(key='sub_region_1',index=date)
# Just London tstibble
london_tibble <- england_tibble %>% filter(sub_region_1=="Greater London")
london_tibble
# Exploring London data ---------------------------------------------------
autoplot(london_tibble, workplaces +
labs(title = "Ansett airlines economy class",
subtitle = "Melbourne-Sydney",
y = "Passengers ('000)")
colnames(london_tibble)
autoplot(london_tibble, workplaces_percent_change_from_baseline) +
labs(title = "Ansett airlines economy class",
subtitle = "Melbourne-Sydney",
y = "Passengers ('000)")
autoplot(london_tibble, workplaces_percent_change_from_baseline) +
labs(title = "Workplace mobility",
subtitle = "London",
y = "Change in mobility from baseline (%)")
autoplot(london_tibble, workplaces_percent_change_from_baseline) +
labs(title = "Workplace mobility",
subtitle = "London",
y = "Change in mobility from baseline (%)",
x= "Date")
gnises the tibble
autoplot(london_tibble, workplaces_percent_change_from_baseline) +
labs(title = "Workplace mobility",
subtitle = "London",
y = "Change in mobility from baseline (%)",
x= "Date")+
theme_light()
london_tibble %>%
gg_season(parks_percent_change_from_baseline, labels = "both") +
labs(y = "$ (millions)",
title = "Seasonal plot: Antidiabetic drug sales")
london_tibble %>%
gg_season(parks_percent_change_from_baseline, labels = "both") +
labs(y = "Change in mobility from baseline (%)",
title = "Seasonal plot: Park mobility")
london_tibble %>%
gg_season(workplaces_percent_change_from_baseline, labels = "both") +
labs(y = "Change in mobility from baseline (%)",
title = "Seasonal plot: Park mobility")
# Checking if any seasonality in workplace mobility
london_tibble %>%
gg_season(workplaces_percent_change_from_baseline, labels = "both") +
labs(y = "Change in mobility from baseline (%)",
title = "Seasonal plot: Workplace mobility")
london_tibble %>%
gg_season(residential_percent_change_from_baseline, labels = "both") +
labs(y = "Change in mobility from baseline (%)",
title = "Seasonal plot: Residential mobility")
install.packages(c("httr", "jsonlite"))
install.packages(c("httr", "jsonlite"))
library(httr)
library(jsonlite)
res = GET("https://api.coronavirus.data.gov.uk/v2/data?areaType=region&areaCode=E12000007&metric=newCasesBySpecimenDate&format=csv")
res
res = GET("https://api.coronavirus.data.gov.uk/v2/data?areaType=region&areaCode=E12000007&metric=newCasesBySpecimenDate&format=json")
res = GET("https://api.coronavirus.data.gov.uk/v2/data?areaType=region&areaCode=E12000007&metric=newCasesBySpecimenDate&format=json")
rawToChar(res$content)
data = fromJSON(rawToChar(res$content))
>> names(data)
names(data)
data
colnames(data)
data
colnames(data$body)
london_cases <-data$body
london_cases
str(london_cases$date)
london_cases$date<-as_date(london_cases$date)
london_cases$date<-as.Date(london_cases$date)
str(london_cases$date)
london_cases_tibble <- london_cases %>%
select(-c("region","areaCode")) %>%
mas_tsibble(key=areaName,index=date)
library(tidyverse)
london_cases_tibble <- london_cases %>%
select(-c("region","areaCode")) %>%
mas_tsibble(key=areaName,index=date)
london_cases_tibble <- london_cases %>%
select(-c("region","areaCode")) %>%
as_tsibble(key=areaName,index=date)
library(fpp3)
london_cases_tibble <- london_cases %>%
select(-c("region","areaCode")) %>%
as_tsibble(key=areaName,index=date)
colnames(london_cases)
london_cases_tibble <- london_cases %>%
select(-c("areaType","areaCode")) %>%
as_tsibble(key=areaName,index=date)
london_cases_tibble
london_cases_tibble %>%
gg_season(newCasesBySpecimenDate, labels = "both") +
labs(y = "Change in mobility from baseline (%)",
title = "Seasonal plot: Park mobility")
autoplot(london_cases_tibble, newCasesBySpecimenDate) +
labs(title = "Official cases",
subtitle = "London",
y = "Daily cases",
x= "Date")+
theme_light()
merge(x= london_tibble, y= london_cases_tibble, by= 'date', all.x= F)
london_combined <- merge(x= london_tibble, y= london_cases_tibble, by= 'date', all.x= F)
colnames(london_combined)
london_combined_tibble <- london_combined %>%
as_tsibble(key=areaName, index=date)
london_combined_tibble
london_combined_tibble
london_combined_tibble <- london_combined %>%
select(-c(areaName)) %>%
as_tsibble(key=areaName, index=date)
colnames(london_combined)
london_combined_tibble <- london_combined %>%
select(-c(sub_region_1)) %>%
as_tsibble(key=areaName, index=date)
london_combined_tibble
london_combined_tibble %>%
filter(year(Time) == 2020) %>%
ggplot(aes(x = workplaces_percent_change_from_baseline, y = newCasesBySpecimenDate)) +
geom_point() +
labs(x = "Temperature (degrees Celsius)",
y = "Electricity demand (GW)")
london_combined_tibble %>%
filter(year(date) == 2020) %>%
ggplot(aes(x = workplaces_percent_change_from_baseline, y = newCasesBySpecimenDate)) +
geom_point() +
labs(x = "Temperature (degrees Celsius)",
y = "Electricity demand (GW)")
london_combined_tibble %>%
filter(year(date) == 2020) %>%
ggplot(aes(x = workplaces_percent_change_from_baseline, y = newCasesBySpecimenDate)) +
geom_point() +
labs(x = "Workplace mobility",
y = "Cases")
london_combined_tibble %>%
filter(year(date) == 2020) %>%
ggplot(aes(x = workplaces_percent_change_from_baseline, y = newCasesBySpecimenDate)) +
geom_point() +
labs(title="Correlation between workplace mobility and cases",
subtitle"London - 2020",
x = "Workplace mobility",
y = "Cases")
london_combined_tibble %>%
filter(year(date) == 2020) %>%
ggplot(aes(x = workplaces_percent_change_from_baseline, y = newCasesBySpecimenDate)) +
geom_point() +
labs(title="Correlation between workplace mobility and cases",
subtitle"London: 2020",
x = "Workplace mobility",
y = "Cases")+
theme_light()
london_combined_tibble %>%
filter(year(date) == 2020) %>%
ggplot(aes(x = workplaces_percent_change_from_baseline, y = newCasesBySpecimenDate)) +
geom_point() +
labs(title="Correlation between workplace mobility and cases",
subtitle"London\: 2020",
x = "Workplace mobility",
y = "Cases")+
theme_light()
london_combined_tibble %>%
filter(year(date) == 2020) %>%
ggplot(aes(x = workplaces_percent_change_from_baseline, y = newCasesBySpecimenDate)) +
geom_point() +
labs(title="Correlation between workplace mobility and cases",
subtitle"London, 2020",
x = "Workplace mobility",
y = "Cases")+
theme_light()
london_combined_tibble %>%
filter(year(date) == 2020) %>%
ggplot(aes(x = workplaces_percent_change_from_baseline, y = newCasesBySpecimenDate)) +
geom_point() +
labs(title="Correlation between workplace mobility and cases",
subtitle"London_2020",
x = "Workplace mobility",
y = "Cases")+
theme_light()
london_combined_tibble %>%
filter(year(date) == 2020) %>%
ggplot(aes(x = workplaces_percent_change_from_baseline, y = newCasesBySpecimenDate)) +
geom_point()
london_combined_tibble %>%
filter(year(date) == 2020) %>%
ggplot(aes(x = workplaces_percent_change_from_baseline, y = newCasesBySpecimenDate)) +
geom_point() +
labs(title="Correlation between workplace mobility and cases",
subtitle"London2020",
x = "Workplace mobility",
y = "Cases")+
theme_light()
london_combined_tibble %>%
filter(year(date) == 2020) %>%
ggplot(aes(x = workplaces_percent_change_from_baseline, y = newCasesBySpecimenDate)) +
geom_point() +
labs(x = "Workplace mobility",
y = "Cases")+
theme_light()
london_combined_tibble %>%
ggplot(aes(x = workplaces_percent_change_from_baseline, y = newCasesBySpecimenDate)) +
geom_point() +
labs(x = "Workplace mobility",
y = "Cases")+
theme_light()
london_combined_tibble %>%
ggplot(aes(x = workplaces_percent_change_from_baseline, y = newCasesBySpecimenDate)) +
geom_point() +
ggtitle("London 2020")
labs(x = "Workplace mobility",
y = "Cases")+
theme_light()
london_combined_tibble %>%
ggplot(aes(x = workplaces_percent_change_from_baseline, y = newCasesBySpecimenDate)) +
geom_point() +
ggtitle("London 2020")+
labs(x = "Workplace mobility",
y = "Cases")+
theme_light()
london_combined_tibble %>%
filter(year(date) == 2020) %>%
ggplot(aes(x = workplaces_percent_change_from_baseline, y = newCasesBySpecimenDate)) +
geom_point() +
ggtitle("London") +
ggsubtitle("2020") +
labs(x = "Workplace mobility",
y = "Cases")+
theme_light()
london_combined_tibble %>%
filter(year(date) == 2020) %>%
ggplot(aes(x = workplaces_percent_change_from_baseline, y = newCasesBySpecimenDate)) +
geom_point() +
ggtitle("London 2020") +
labs(x = "Workplace mobility",
y = "Cases")+
theme_light()
london_combined_tibble %>%
filter(year(date) == 2021) %>%
ggplot(aes(x = workplaces_percent_change_from_baseline, y = newCasesBySpecimenDate)) +
geom_point() +
ggtitle("London 2020") +
labs(x = "Workplace mobility",
y = "Cases")+
theme_light()
london_combined_tibble %>%
filter(year(date) == 2022) %>%
ggplot(aes(x = workplaces_percent_change_from_baseline, y = newCasesBySpecimenDate)) +
geom_point() +
ggtitle("London 2020") +
labs(x = "Workplace mobility",
y = "Cases")+
theme_light()
london_tibble_combined %>%
ACF(workplaces_percent_change_from_baseline) %>%
autoplot() + labs(title="London workplace mobility ACF")
london_combined_tibble %>%
ACF(workplaces_percent_change_from_baseline) %>%
autoplot() + labs(title="London workplace mobility ACF")
london_combined_tibble %>%
ACF(workplaces_percent_change_from_baseline) %>%
autoplot() + labs(title="London workplace mobility ACF")
london_combined_tibble %>%
ACF(workplaces_percent_change_from_baseline, max_lag=365*2) %>%
autoplot() + labs(title="London workplace mobility ACF")
london_combined_tibble %>%
ACF(workplaces_percent_change_from_baseline, max_lag=50) %>%
autoplot() + labs(title="London workplace mobility ACF")
dcmp <- london_combined_tibble %>%
model(stl = STL(workplaces_percent_change_from_baseline))
components(dcmp)
components(dcmp) %>%
as_tsibble() %>%
autoplot(workplaces_percent_change_from_baseline, colour="gray") +
geom_line(aes(y=trend), colour = "#D55E00") +
labs(
y = "Persons (thousands)",
title = "Total employment in US retail"
)
#Plot
components(dcmp) %>%
as_tsibble() %>%
autoplot(workplaces_percent_change_from_baseline, colour="gray") +
geom_line(aes(y=trend), colour = "#D55E00") +
labs(
y = "Change in mobility comapred to baseline (%)",
title = "Workplace mobility in London - decomposition"
)
components(dcmp) %>% autoplot()
components(dcmp_parks) %>%
as_tsibble() %>%
autoplot(parks_percent_change_from_baseline, colour="gray") +
geom_line(aes(y=trend), colour = "#D55E00") +
labs(
y = "Change in mobility comapred to baseline (%)",
title = "Parks mobility in London - decomposition"
)
cmp_parks <- london_combined_tibble %>%
model(stl = STL(parks_percent_change_from_baseline))
components(dcmp)
#Plot
components(dcmp_parks) %>%
as_tsibble() %>%
autoplot(parks_percent_change_from_baseline, colour="gray") +
geom_line(aes(y=trend), colour = "#D55E00") +
labs(
y = "Change in mobility comapred to baseline (%)",
title = "Parks mobility in London - decomposition"
)
dcmp_parks <- london_combined_tibble %>%
model(stl = STL(parks_percent_change_from_baseline))
components(dcmp)
#Plot
components(dcmp_parks) %>%
as_tsibble() %>%
autoplot(parks_percent_change_from_baseline, colour="gray") +
geom_line(aes(y=trend), colour = "#D55E00") +
labs(
y = "Change in mobility comapred to baseline (%)",
title = "Parks mobility in London - decomposition"
)
components(dcmp_parks) %>% autoplot()
components(dcmp_parks) %>%
as_tsibble() %>%
autoplot(parks_percent_change_from_baseline  , colour = "gray") +
geom_line(aes(y=season_adjust), colour = "#0072B2") +
labs(y = "Change in mobility comapred to baseline (%)",
title = "Parks mobility in London - seasonality removed")
