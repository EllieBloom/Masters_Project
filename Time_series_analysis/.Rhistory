#legend.key = element_rect(fill = "transparent")
)
ggplot(eng, aes(fill = rgn15nm)) +
geom_sf() +
theme_bw() +
guides(fill=guide_legend(title="Region"))+
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
legend.position = c(0.2,0.8),
#legend.key = element_rect(fill = "transparent")
)
ggplot(eng, aes(fill = rgn15nm)) +
geom_sf() +
theme_bw() +
guides(fill=guide_legend(title="Region"))+
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
legend.position = c(0.2,0.8),
legend.key = element_rect(fill = "transparent")
)
ggplot(eng, aes(fill = rgn15nm)) +
geom_sf() +
#theme_bw() +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
legend.position = c(0.2,0.8),
legend.key = element_rect(fill = "transparent")
) +
guides(fill=guide_legend(title="Region"))+
# Testing out changing the colour by a variable
mobility_regional <-read.csv("/Users/elliebloom/Desktop/Masters/Project/Analysis/Mapping/Outputs/google_regional_long.csv")
ggplot(eng, aes(fill = rgn15nm)) +
geom_sf() +
#theme_bw() +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
legend.position = c(0.2,0.8),
legend.key = element_rect(fill = "transparent")
) +
guides(fill=guide_legend(title="Region"))
ggplot(eng, aes(fill = rgn15nm)) +
geom_sf() +
theme_bw() +
guides(fill=guide_legend(title="Region"))+
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
legend.position = c(0.15,0.8),
legend.key = element_rect(fill = "transparent")
)
ggplot(eng, aes(fill = rgn15nm)) +
geom_sf() +
theme_bw() +
guides(fill=guide_legend(title="Region"))+
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
legend.position = c(0.17,0.8),
legend.key = element_rect(fill = "transparent")
)
# Setup -------------------------------------------------------------------
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(tidyverse)
library(astsa) # Time series package used in datacamp course
library(lubridate) # Using to add months to date
library(lmtest) # For granger causality test
library(vars) # For VARIMA: https://towardsdatascience.com/fun-with-arma-var-and-granger-causality-6fdd29d8391c
# Functions
min_max_normalise <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
# Useful dates ------------------------------------------------------------
bank_holidays <-as.Date(c("2020-01-01","2020-04-10","2020-04-13","2020-05-08",
"2020-05-25","2020-08-31","2020-12-25","2020-12-28",
"2021-01-01","2021-04-02","2021-04-05","2021-05-03",
"2021-05-31","2021-08-30","2021-12-27","2021-12-28",
"2022-01-03","2022-04-15","2022-04-18","2022-05-02"),
"%Y-%m-%d")
lockdown_1_start <- as.Date("2020-03-26","%Y-%m-%d")
lockdown_1_end <- as.Date("2020-06-15","%Y-%m-%d")
lockdown_2_start <- as.Date("2020-11-05","%Y-%m-%d")
lockdown_2_end <- as.Date("2020-12-02","%Y-%m-%d")
lockdown_3_start <- as.Date("2021-01-06","%Y-%m-%d")
lockdown_3_end <- as.Date("2021-04-21","%Y-%m-%d")
REACT_start <-as.Date("2020-05-01","%Y-%m-%d")
start_date <- REACT_start
end_date <- lockdown_2_start%m+%months(-1)
# Looking at London workplace mobility from the start of REACT
region_of_interest <- "LONDON"
mobility_of_interest <- "workplaces"
mobility_of_interest_av <- "workplaces_av"
# Reading tibbles ---------------------------------------------------------
# Loading tibbles ---------------------------------------------------------
mobility_ts <- readRDS("/Users/elliebloom/Desktop/Masters/Project/Analysis/Time_series_analysis/Ouputs/Tibbles/mobility_tibble_raw.rds")
summary(mobility_ts)
cases_ts <- readRDS("/Users/elliebloom/Desktop/Masters/Project/Analysis/Time_series_analysis/Ouputs/Tibbles/cases_tibble.rds")
summary(cases_ts)
prev_ts <- readRDS("/Users/elliebloom/Desktop/Masters/Project/Analysis/Time_series_analysis/Ouputs/Tibbles/prev_tibble.rds")
summary(prev_ts)
prev_smooth_ts <- readRDS("/Users/elliebloom/Desktop/Masters/Project/Analysis/Time_series_analysis/Ouputs/Tibbles/prev_smooth_tibble.rds")
## Mobility - workplace ----------------------------------------------------
workplace_ts <- mobility_ts %>% filter(region=="LONDON",type_mobility=="workplaces", date<=lockdown_2_start)
min_workplace <- min(workplace_ts$mobility)
max_workplace <- max(workplace_ts$mobility)
workplace_ts$mobility_normalised <- min_max_normalise(workplace_ts$mobility)
summary(workplace_ts$mobility_normalised)
# Changing the minimum to be non-zero to allow to be logged
table(workplace_ts$mobility_normalised[workplace_ts$mobility_normalised==0])
min(workplace_ts$mobility_normalised[workplace_ts$mobility_normalised!=0])
workplace_ts$mobility_normalised[workplace_ts$mobility_normalised==0]<-min(workplace_ts$mobility_normalised[workplace_ts$mobility_normalised!=0])
min_workplace
max_workplace
min_prev <- min(london_prev_smooth_ts$p)
max_prev <- max(london_prev_smooth_ts$p)
london_prev_smooth_ts <- prev_smooth_ts %>% filter(region=="LONDON", d_comb<lockdown_2_start)
min_prev <- min(london_prev_smooth_ts$p)
max_prev <- max(london_prev_smooth_ts$p)
min_prev
max_prev
max_prev
min_cases <- min(london_cases_ts$cases)
london_cases_ts <- cases_ts %>% filter(region=="LONDON", date>=start_date)
min_cases <- min(london_cases_ts$cases)
max_cases <- max(london_cases_ts$cases)
min_cases
max_cases
# Date started: 14th June 2022
# Setup -------------------------------------------------------------------
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(tidyverse)
library(astsa) # Time series package used in datacamp course
library(lubridate) # Using to add months to date
library(lmtest) # For granger causality test
library(vars) # For VARIMA: https://towardsdatascience.com/fun-with-arma-var-and-granger-causality-6fdd29d8391c
# Functions
min_max_normalise <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
# Useful dates ------------------------------------------------------------
bank_holidays <-as.Date(c("2020-01-01","2020-04-10","2020-04-13","2020-05-08",
"2020-05-25","2020-08-31","2020-12-25","2020-12-28",
"2021-01-01","2021-04-02","2021-04-05","2021-05-03",
"2021-05-31","2021-08-30","2021-12-27","2021-12-28",
"2022-01-03","2022-04-15","2022-04-18","2022-05-02"),
"%Y-%m-%d")
lockdown_1_start <- as.Date("2020-03-26","%Y-%m-%d")
lockdown_1_end <- as.Date("2020-06-15","%Y-%m-%d")
lockdown_2_start <- as.Date("2020-11-05","%Y-%m-%d")
lockdown_2_end <- as.Date("2020-12-02","%Y-%m-%d")
lockdown_3_start <- as.Date("2021-01-06","%Y-%m-%d")
lockdown_3_end <- as.Date("2021-04-21","%Y-%m-%d")
REACT_start <-as.Date("2020-05-01","%Y-%m-%d")
start_date <- REACT_start
end_date <- lockdown_2_start%m+%months(-1)
# Looking at London workplace mobility from the start of REACT
region_of_interest <- "LONDON"
mobility_of_interest <- "workplaces"
mobility_of_interest_av <- "workplaces_av"
# Reading tibbles ---------------------------------------------------------
# Loading tibbles ---------------------------------------------------------
mobility_ts <- readRDS("/Users/elliebloom/Desktop/Masters/Project/Analysis/Time_series_analysis/Ouputs/Tibbles/mobility_tibble_raw.rds")
summary(mobility_ts)
cases_ts <- readRDS("/Users/elliebloom/Desktop/Masters/Project/Analysis/Time_series_analysis/Ouputs/Tibbles/cases_tibble.rds")
summary(cases_ts)
prev_ts <- readRDS("/Users/elliebloom/Desktop/Masters/Project/Analysis/Time_series_analysis/Ouputs/Tibbles/prev_tibble.rds")
summary(prev_ts)
prev_smooth_ts <- readRDS("/Users/elliebloom/Desktop/Masters/Project/Analysis/Time_series_analysis/Ouputs/Tibbles/prev_smooth_tibble.rds")
## Mobility - workplace ----------------------------------------------------
workplace_ts <- mobility_ts %>% filter(region=="LONDON",type_mobility=="workplaces", date<=lockdown_2_start)
min_workplace <- min(workplace_ts$mobility)
min_workplace #-87
max_workplace <- max(workplace_ts$mobility)
max_workplace # 1
workplace_ts$mobility_normalised <- min_max_normalise(workplace_ts$mobility)
summary(workplace_ts$mobility_normalised)
# Changing the minimum to be non-zero to allow to be logged
table(workplace_ts$mobility_normalised[workplace_ts$mobility_normalised==0])
min(workplace_ts$mobility_normalised[workplace_ts$mobility_normalised!=0])
workplace_ts$mobility_normalised[workplace_ts$mobility_normalised==0]<-min(workplace_ts$mobility_normalised[workplace_ts$mobility_normalised!=0])
## REACT prevalence --------------------------------------------------------
london_prev_smooth_ts <- prev_smooth_ts %>% filter(region=="LONDON", d_comb<lockdown_2_start)
min_prev <- min(london_prev_smooth_ts$p)
min_prev #  0.0005074915
max_prev <- max(london_prev_smooth_ts$p)
max_prev # 0.01363462
# Normalisation
london_prev_smooth_ts$prev_normalised <- min_max_normalise(london_prev_smooth_ts$p)
summary(london_prev_smooth_ts$prev_normalised)
# Changing the minimum to be non-zero to allow to be logged
london_prev_smooth_ts$prev_normalised[london_prev_smooth_ts$prev_normalised==0]<-min(london_prev_smooth_ts$prev_normalised[london_prev_smooth_ts$prev_normalised!=0])
min(london_cases_ts$cases_normalised)
## Official cases ----------------------------------------------------------
london_cases_ts <- cases_ts %>% filter(region=="LONDON", date>=start_date)
min_cases <- min(london_cases_ts$cases)
min_cases #20
max_cases <- max(london_cases_ts$cases)
max_cases # 36920
# Normalisation
london_cases_ts$cases_normalised <- min_max_normalise(london_cases_ts$cases)
summary(london_cases_ts$cases_normalised)
# Changing the minimum to be non-zero to allow to be logged
min(london_cases_ts$cases_normalised[london_cases_ts$cases_normalised!=0])
london_cases_ts$cases_normalised[london_cases_ts$cases_normalised==0]<-min(london_cases_ts$cases_normalised[london_cases_ts$cases_normalised!=0])
min(london_cases_ts$cases_normalised)
# Setup -------------------------------------------------------------------
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(tidyverse)
library(astsa) # Time series package used in datacamp course
library(lubridate)
library(zoo)
library(fable) # For auto ARIMA I think
# Defining min max function
min_max_normalise <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
# Useful dates ------------------------------------------------------------
bank_holidays <-as.Date(c("2020-01-01","2020-04-10","2020-04-13","2020-05-08",
"2020-05-25","2020-08-31","2020-12-25","2020-12-28",
"2021-01-01","2021-04-02","2021-04-05","2021-05-03",
"2021-05-31","2021-08-30","2021-12-27","2021-12-28",
"2022-01-03","2022-04-15","2022-04-18","2022-05-02"),
"%Y-%m-%d")
lockdown_1_start <- as.Date("2020-03-26","%Y-%m-%d")
lockdown_1_end <- as.Date("2020-06-15","%Y-%m-%d")
lockdown_2_start <- as.Date("2020-11-05","%Y-%m-%d")
lockdown_2_end <- as.Date("2020-12-02","%Y-%m-%d")
lockdown_3_start <- as.Date("2021-01-06","%Y-%m-%d")
lockdown_3_end <- as.Date("2021-04-21","%Y-%m-%d")
REACT_start <-as.Date("2020-05-01","%Y-%m-%d")
# Loading tibbles ---------------------------------------------------------
mobility_ts <- readRDS("/Users/elliebloom/Desktop/Masters/Project/Analysis/Time_series_analysis/Ouputs/Tibbles/mobility_tibble_raw.rds")
summary(mobility_ts)
cases_ts <- readRDS("/Users/elliebloom/Desktop/Masters/Project/Analysis/Time_series_analysis/Ouputs/Tibbles/cases_tibble.rds")
summary(cases_ts)
prev_ts <- readRDS("/Users/elliebloom/Desktop/Masters/Project/Analysis/Time_series_analysis/Ouputs/Tibbles/prev_tibble.rds")
summary(prev_ts)
prev_smooth_ts <- readRDS("/Users/elliebloom/Desktop/Masters/Project/Analysis/Time_series_analysis/Ouputs/Tibbles/prev_smooth_tibble.rds")
# Constraints -------------------------------------------------------------
# Looking at London workplace mobility from the start of lockdown 1 to the start of lockdown 2
region_of_interest <- "LONDON"
mobility_of_interest <- "workplaces"
mobility_of_interest_av <- "workplaces_av"
start_date <- REACT_start
end_date <- lockdown_2_start%m+%months(-1) # Make it the month before the start of lockdown to allow for test/train split/forecasting
# Exploring ARIMA models --------------------------------------------------
## Workplace mobility ------------------------------------------------------
### Getting data ready ------------------------------------------------------
# Data normalised including forecasting period
workplace_ts_all <- mobility_ts %>% filter(region=="LONDON",type_mobility=="workplaces", date<lockdown_2_start)
min_workplace <- min(workplace_ts$mobility)
min_workplace #-87
max_workplace <- max(workplace_ts$mobility)
max_workplace # 1
min_workplace <- min(workplace_ts_all$mobility)
min_workplace #-87
max_workplace <- max(workplace_ts_all$mobility)
max_workplace # 1
workplace_ts_all$mobility_normalised <- min_max_normalise(workplace_ts_all$mobility)
summary(workplace_ts_all$mobility_normalised)
min_prev <- min(workplace_ts_all$p)
min_prev #  0.0005074915
london_prev_smooth_ts_all <- prev_smooth_ts %>% filter(region=="LONDON", d_comb>=start_date, d_comb<lockdown_2_start)
# Normalisation
london_prev_smooth_ts_all$prev_normalised <- min_max_normalise(london_prev_smooth_ts_all$p)
# Check normalisation
summary(london_prev_smooth_ts_all$prev_normalised)
min_prev <- min(london_prev_smooth_ts_all$p)
min_prev #  0.0005074915
max_prev <- max(london_prev_smooth_ts_all$p)
max_prev # 0.01363462
london_cases_ts_all <- cases_ts %>% filter(region=="LONDON", date>=start_date, date<lockdown_2_start)
summary(london_cases_ts_all)
min_cases <- min(london_cases_ts_all$cases)
min_cases #20
max_cases <- max(london_cases_ts_all$cases)
max_cases # 36920
# Normalisation prior to cutting off final month
london_cases_ts_all$cases_normalised <- min_max_normalise(london_cases_ts_all$cases)
# Check normalisation
summary(london_cases_ts_all$cases_normalised)
# Change min to be non-zero
london_cases_ts_all$cases_normalised[london_cases_ts_all$cases_normalised==0]<-min(london_cases_ts$cases_normalised[london_cases_ts$cases_normalised!=0])
min(london_cases_ts_all$cases_normalised) # Check - o
london_cases_ts <- london_cases_ts_all %>% filter(date<end_date)
ggplot(data=london_cases_ts, aes(x=date,y=cases)) +
geom_line(color="red") +
ggtitle("Official cases in London")+
labs(y="Cases",
x="Date (2020)",
subtitle="Start of REACT to 1 month before end of lockdown 2")+
theme_light()
sarima(log(london_cases_ts$cases_normalised),0,1,1,0,1,1,7)
# Normalised data
tsplot(london_cases_ts$cases_normalised)
# Log normalised (to reduce increasing variance)
tsplot(log(london_cases_ts$cases_normalised))
# Non-seasonal differenced log data
tsplot(diff(log(london_cases_ts$cases_normalised)))
# Additional weekly seasonal differencing
tsplot(diff(diff(log(london_cases_ts$cases_normalised),lag=7)))
sarima(log(london_cases_ts$cases_normalised),0,1,1,0,1,1,7)
sarima(log(london_cases_ts$cases_normalised),0,1,1,2,1,0,7)
# Setup -------------------------------------------------------------------
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(tidyverse)
library(astsa) # Time series package used in datacamp course
library(lubridate)
library(zoo)
library(fable) # For auto ARIMA I think
# Defining min max function
min_max_normalise <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
# Useful dates ------------------------------------------------------------
bank_holidays <-as.Date(c("2020-01-01","2020-04-10","2020-04-13","2020-05-08",
"2020-05-25","2020-08-31","2020-12-25","2020-12-28",
"2021-01-01","2021-04-02","2021-04-05","2021-05-03",
"2021-05-31","2021-08-30","2021-12-27","2021-12-28",
"2022-01-03","2022-04-15","2022-04-18","2022-05-02"),
"%Y-%m-%d")
lockdown_1_start <- as.Date("2020-03-26","%Y-%m-%d")
lockdown_1_end <- as.Date("2020-06-15","%Y-%m-%d")
lockdown_2_start <- as.Date("2020-11-05","%Y-%m-%d")
lockdown_2_end <- as.Date("2020-12-02","%Y-%m-%d")
lockdown_3_start <- as.Date("2021-01-06","%Y-%m-%d")
lockdown_3_end <- as.Date("2021-04-21","%Y-%m-%d")
REACT_start <-as.Date("2020-05-01","%Y-%m-%d")
# Loading tibbles ---------------------------------------------------------
mobility_ts <- readRDS("/Users/elliebloom/Desktop/Masters/Project/Analysis/Time_series_analysis/Ouputs/Tibbles/mobility_tibble_raw.rds")
summary(mobility_ts)
cases_ts <- readRDS("/Users/elliebloom/Desktop/Masters/Project/Analysis/Time_series_analysis/Ouputs/Tibbles/cases_tibble.rds")
summary(cases_ts)
prev_ts <- readRDS("/Users/elliebloom/Desktop/Masters/Project/Analysis/Time_series_analysis/Ouputs/Tibbles/prev_tibble.rds")
summary(prev_ts)
prev_smooth_ts <- readRDS("/Users/elliebloom/Desktop/Masters/Project/Analysis/Time_series_analysis/Ouputs/Tibbles/prev_smooth_tibble.rds")
# Constraints -------------------------------------------------------------
# Looking at London workplace mobility from the start of lockdown 1 to the start of lockdown 2
region_of_interest <- "LONDON"
mobility_of_interest <- "workplaces"
mobility_of_interest_av <- "workplaces_av"
start_date <- REACT_start
end_date <- lockdown_2_start%m+%months(-1) # Make it the month before the start of lockdown to allow for test/train split/forecasting
# Exploring ARIMA models --------------------------------------------------
## Workplace mobility ------------------------------------------------------
### Getting data ready ------------------------------------------------------
# Data normalised including forecasting period
workplace_ts_all <- mobility_ts %>% filter(region=="LONDON",type_mobility=="workplaces", date<lockdown_2_start)
min_workplace <- min(workplace_ts_all$mobility)
min_workplace #-87
max_workplace <- max(workplace_ts_all$mobility)
max_workplace # 1
# Need to use min max scaling to bring all values between 0 and 1 so that they can be logged
workplace_ts_all$mobility_normalised <- min_max_normalise(workplace_ts_all$mobility)
summary(workplace_ts_all$mobility_normalised)
# Change any 0s to the non-zero miniumum
workplace_ts_all$mobility_normalised[workplace_ts_all$mobility_normalised==0]<-min(workplace_ts_all$mobility_normalised[workplace_ts_all$mobility_normalised!=0])
min(workplace_ts_all$mobility_normalised)
# Now filter to the desired date
workplace_ts <- workplace_ts_all %>% filter(date>=start_date, date<end_date)
ggplot(data=workplace_ts, aes(x=date,y=mobility)) +
geom_line(color="royal blue") +
ggtitle("Workplace mobility in London")+
labs(y="Mobility change from baseline (%)",
x="Date (2020)",
subtitle="Start of REACT to 1 month before end of lockdown 2")+
theme_light()
### Exploring ARIMA ---------------------------------------------------------
# Normalised data
tsplot(workplace_ts$mobility_normalised)
# Log normalised (to reduce increasing variance)
tsplot(log(workplace_ts$mobility_normalised))
# Non-seasonal differenced log data
tsplot(diff(log(workplace_ts$mobility_normalised)))
# Additional weekly seasonal differencing
tsplot(diff(diff(log(workplace_ts$mobility_normalised),lag=7)))
# Creating log dd data to use later
mobility_normalised_log_dd <- diff(diff(log(workplace_ts$mobility_normalised),lag=7))
acf2(mobility_normalised_log_dd)
# Fitting auto model
fit_log <- workplace_ts %>%
model( auto = ARIMA(log(mobility_normalised), stepwise = FALSE, approx = FALSE)
)
fit_log
# Auto gives
# p = 4
# d = 0
# q = 0
# P = 0
# D = 1
# Q = 1
# S = 7
sarima(log(workplace_ts$mobility_normalised),4,0,0,0,1,1,7)
# AIC: -0.3807216
# BIC: -0.2402253
# Looks pretty good - there are however heavy tails for redisuals -> not quite normal, also fails on Ljung Box with greater lags
# Could also try without logging and see if it is an improvement
fit <- workplace_ts %>%
model( auto = ARIMA(mobility_normalised, stepwise = FALSE, approx = FALSE)
)
fit
fit_final <- sarima(workplace_ts$mobility_normalised,2,0,1,0,1,2,7)
fit_final
# Better than logged data, especially on Ljung-Box test -> use unlogged for workplace mobility
# AIC: -3.594837
# BIC: -3.45434
### Plotting model/forecasting ------------------------------------------------------
#Using astsa package to get predicted data
pred_mob=sarima.for(workplace_ts$mobility_normalised,n.ahead=31,2,0,1,0,1,2,7)
pred_mob
length(pred_mob$pred)
pred_date<-seq(max(workplace_ts$date)%m+%days(1),max(workplace_ts$date)%m+%days(31),1)
length(pred_date)
pred_final <-cbind(pred_date,pred_mob$pred)
colnames(pred_final)<-c("date","mob_pred")
pred_final <- as.data.frame(pred_final)
pred_final$date <- as.Date(pred_final$date)
# Getting actual data to compare forecast with
min_date <- min(pred_final$date)
max_date <- max(pred_final$date)
workplace_ts_pred_actual <- workplace_ts_all %>% filter(date>=end_date)
workplace_ts_pred_actual$date <-as.Date(workplace_ts_pred_actual$date)
ggplot() +
geom_line(data=workplace_ts, aes(x=date,y=mobility_normalised)) +
geom_line(data=workplace_ts_pred_actual, aes(x=date,y=mobility_normalised), col="blue")+
geom_line(data=pred_final, aes(x=date,y=mob_pred), linetype="dashed", col="red")+
ggtitle("Workplace mobility in London")+
labs(y="Mobility change from baseline (%)",
x="Date (2020)",
subtitle="Start of REACT to 1 month before end of lockdown 2")+
theme_light()
# Blue = actual
# Read = forecast
## Official cases ----------------------------------------------------------
### Getting data ready ------------------------------------------------------
london_cases_ts_all <- cases_ts %>% filter(region=="LONDON", date>=start_date, date<lockdown_2_start)
summary(london_cases_ts_all)
min_cases <- min(london_cases_ts_all$cases)
min_cases #20
max_cases <- max(london_cases_ts_all$cases)
max_cases # 2965
# Normalisation prior to cutting off final month
london_cases_ts_all$cases_normalised <- min_max_normalise(london_cases_ts_all$cases)
# Check normalisation
summary(london_cases_ts_all$cases_normalised)
# Change min to be non-zero
london_cases_ts_all$cases_normalised[london_cases_ts_all$cases_normalised==0]<-min(london_cases_ts$cases_normalised[london_cases_ts$cases_normalised!=0])
min(london_cases_ts_all$cases_normalised) # Check - o
# Remove the forecasting window
london_cases_ts <- london_cases_ts_all %>% filter(date<end_date)
ggplot(data=london_cases_ts, aes(x=date,y=cases)) +
geom_line(color="red") +
ggtitle("Official cases in London")+
labs(y="Cases",
x="Date (2020)",
subtitle="Start of REACT to 1 month before end of lockdown 2")+
theme_light()
### Exploring ARIMA ---------------------------------------------------------
# Normalised data
tsplot(london_cases_ts$cases_normalised)
# Log normalised (to reduce increasing variance)
tsplot(log(london_cases_ts$cases_normalised))
# Non-seasonal differenced log data
tsplot(diff(log(london_cases_ts$cases_normalised)))
# Additional weekly seasonal differencing
tsplot(diff(diff(log(london_cases_ts$cases_normalised),lag=7)))
# ARIMA auto on log
cases_fit_log <- london_cases_ts %>%
model( auto = ARIMA(log(cases_normalised), stepwise = FALSE, approx = FALSE)
)
cases_fit_log
# AIC: 1.130232
# BIC: 1.190714
sarima(log(london_cases_ts$cases_normalised),0,1,1,0,1,1,7)
# Fails Ljung-Box test on longer lags
# Try without log
tsplot(diff(diff(london_cases_ts$cases_normalised,lag=7))) # looks a lot less stationary
cases_fit <- london_cases_ts %>%
model( auto = ARIMA(cases_normalised, stepwise = FALSE, approx = FALSE)
)
cases_fit
# AIC: 1.182877
# BIC: 1.26352
sarima(log(london_cases_ts$cases_normalised),0,1,1,2,1,0,7)
sarima(log(london_cases_ts$cases_normalised),0,1,1,2,1,0,7, hessian=FALSE)
