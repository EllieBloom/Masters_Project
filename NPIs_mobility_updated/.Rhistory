map_dtw_grocery,
map_dtw_transit,
map_dtw_retail,
map_dtw_residential,
as_ggplot(workplaces_legend))
map_dtw_grocery <- ggplot(eng_grocery, aes(fill = lag, label=lag)) +
geom_sf() +
theme_bw() +
scale_fill_gradient2(low = "#2166AC", mid="#F7F7F7", high = "#B2182B", midpoint=0,
breaks=colour_breaks, limits=colour_limits) +
guides(fill=guide_legend(title="Lag"))+
ggtitle("Grocery and pharmacy")+
theme(
plot.title = element_text(hjust=0.5, size=14, face="bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
legend.position = "none",
#legend.position = c(0.17,0.5),
legend.key = element_rect(fill = "transparent"),
plot.margin = unit(c(0, 0, 0, 0), "cm"),
panel.border = element_blank()
)
plot_grid(map_dtw_workplaces,
map_dtw_grocery,
map_dtw_transit,
map_dtw_retail,
map_dtw_residential,
as_ggplot(workplaces_legend))
setwd("~/Desktop/Masters/Project/Analysis/Lags/Outputs/regional")
ggsave(file="multiplot_dtw_regional.png", plot_grid(map_dtw_workplaces,
map_dtw_grocery,
map_dtw_transit,
map_dtw_retail,
map_dtw_residential,
as_ggplot(workplaces_legend),
align="hv"), width=37, height=37, units="cm")
# Setup -------------------------------------------------------------------
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(tidyverse)
library(stringr)
library(dtw)
library(BBmisc)
min_max_normalise <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
# Useful dates ------------------------------------------------------------
lockdown_1_start <- as.Date("2020-03-26","%Y-%m-%d")
lockdown_1_end <- as.Date("2020-06-15","%Y-%m-%d")
lockdown_2_start <- as.Date("2020-11-05","%Y-%m-%d")
lockdown_2_end <- as.Date("2020-12-02","%Y-%m-%d")
lockdown_3_start <- as.Date("2021-01-06","%Y-%m-%d")
lockdown_3_end <- as.Date("2021-04-21","%Y-%m-%d")
REACT_start <-as.Date("2020-05-01","%Y-%m-%d")
# Loading mobility tibble ---------------------------------------------------------
mobility_google <- readRDS("/Users/elliebloom/Desktop/Masters/Project/Analysis/Mapping/Outputs/google_england_long.rds")
# Only want the rolling averages
mobility_av <- mobility_google %>% filter(str_detect(type_mobility, 'av'))
# Defining a list of types of mobility
types_mobility <- c("retail_recreation_av", "grocery_pharmacy_av", "parks_av","transit_stations_av", "workplaces_av","residential_av")
mobility_av <- mobility_av %>%
mutate(type_mobility =
case_when(type_mobility=="retail_recreation_av"~"Retail & recreation" ,
type_mobility=="grocery_pharmacy_av"~ "Grocery & pharmacy",
type_mobility=="parks_av"~ "Parks",
type_mobility=="transit_stations_av"~ "Transit stations",
type_mobility=="workplaces_av"~ "Workplaces",
type_mobility=="residential_av"~ "Residential"))
types_mobility <- dput(unique(mobility_av$type_mobility))
types_mobility
# Load REACT reproduction number data -------------------------------------
react_reprod <- readRDS("~/Desktop/Masters/Project/Data/REACT_reproduction/National_reproduction_R.rds")
REACT_reprod_start <- as.Date("2020-05-15","%Y-%m-%d")
query=mobility_av
reference=react_reprod
mobility_place="Residential"
end_date=lockdown_3_end
region="ENGLAND"
mob <- query %>% filter(date>=start_date, date<=end_date, type_mobility == mobility_place, region=="ENGLAND")
start_date=lockdown_3_start
end_date=lockdown_3_end
mob <- query %>% filter(date>=start_date, date<=end_date, type_mobility == mobility_place, region=="ENGLAND")
reprod <- reference %>% filter(d_comb>=start_date, d_comb <= end_date)
# DTW function
dtw_lag <- dtw(normalize(mob$mobility), normalize(reprod$r))
print("Mean distance between indices is:")
print(mean(dtw_lag$index1 - dtw_lag$index2))
# DTW path plot
dtw_data <- as.data.frame(cbind(dtw_lag$index1, dtw_lag$index2))
colnames(dtw_data)<- c("mob_index","r_index")
write.csv(dtw_data,"dtw_indices.csv" )
getwd()
dtw_plot <-   ggplot(data=dtw_data, aes(x=mob_index, y=r_index))+
geom_line(col="blue") +
theme_bw() +
labs(x="Mobility series index",
y="R(t) series index")+
#ggtitle(paste0("Mobility: ", mobility_place,", Start date: ", start_date, ", End date:", end_date, ", Region: " , region)) +
geom_abline(slope=1, intercept=0, col="red", linetype="dashed")
dtw_plot
mob <- mob[c("date" ,"mobility" , "type_mobility")]
colnames(mob) <- c("date_series" , "series", "type")
mob$series <- normalize(mob$series)
reprod <- reprod[c("r","d_comb")]
reprod$type <- "R(t)"
colnames(reprod) <- c("series","date_series","type")
reprod$series <- normalize(reprod$series)
data <- rbind(mob, reprod)
plot_series <- ggplot(data)+
geom_line(aes(x=date_series,y=series, col=type))+
theme_light()+
labs(y="Normalised time-series", x="")+
ggtitle(paste0("Mobility: ", mobility_place,", Start date: ", start_date, ", End date:", end_date, ", Region: " , region))+
theme(plot.title = element_text(hjust = 0.5),legend.position = "right",
panel.border=element_blank(),
axis.line = element_line(colour = "black"),
legend.title = element_blank())
plot_series
ccf_summary
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(tidyverse)
library(stringr)
library(dtw)
library(BBmisc)
library(RColorBrewer)
min_max_normalise <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
# Useful dates ------------------------------------------------------------
lockdown_1_start <- as.Date("2020-03-26","%Y-%m-%d")
lockdown_1_end <- as.Date("2020-06-15","%Y-%m-%d")
lockdown_2_start <- as.Date("2020-11-05","%Y-%m-%d")
lockdown_2_end <- as.Date("2020-12-02","%Y-%m-%d")
lockdown_3_start <- as.Date("2021-01-06","%Y-%m-%d")
lockdown_3_end <- as.Date("2021-04-21","%Y-%m-%d")
REACT_start <-as.Date("2020-05-01","%Y-%m-%d")
# Loading mobility tibble ---------------------------------------------------------
mobility_google <- readRDS("/Users/elliebloom/Desktop/Masters/Project/Analysis/Mapping/Outputs/google_england_long.rds")
# Only want the rolling averages
mobility_av <- mobility_google %>% filter(str_detect(type_mobility, 'av'))
# Defining a list of types of mobility
types_mobility <- c("retail_recreation_av", "grocery_pharmacy_av", "parks_av","transit_stations_av", "workplaces_av","residential_av")
mobility_av <- mobility_av %>%
mutate(type_mobility =
case_when(type_mobility=="retail_recreation_av"~"Retail & recreation" ,
type_mobility=="grocery_pharmacy_av"~ "Grocery & pharmacy",
type_mobility=="parks_av"~ "Parks",
type_mobility=="transit_stations_av"~ "Transit stations",
type_mobility=="workplaces_av"~ "Workplaces",
type_mobility=="residential_av"~ "Residential"))
types_mobility <- dput(unique(mobility_av$type_mobility))
types_mobility
mobility_av <- mobility_av %>%
mutate(region =
case_when(region=="EAST"~"East of England" ,
region=="EAST MIDLANDS"~ "East Midlands",
region=="ENGLAND"~ "England",
region=="LONDON"~ "London",
region=="NORTH EAST"~ "North East",
region=="NORTH WEST"~ "North West",
region=="SOUTH EAST"~ "South East",
region=="SOUTH WEST"~ "South West",
region=="WEST MIDLANDS"~ "West Midlands",
region=="YORKSHIRE AND THE HUMBER"~ "Yorkshire and The Humber"))
# Load REACT reproduction number data -------------------------------------
# England national level
react_reprod_national <- readRDS("~/Desktop/Masters/Project/Data/REACT_reproduction/National_reproduction_R.rds")
react_reprod_national$reg_char <- "England"
REACT_reprod_start <- as.Date("2020-05-15","%Y-%m-%d")
react_reprod_regional <-readRDS("~/Desktop/Masters/Project/Data/REACT_reproduction/regional_reproduction_R.RDS")
react_reprod_regional <- rbind(react_reprod_regional, react_reprod_national)
region_list <- dput(unique(react_reprod_regional$reg_char))
# CCF ---------------------------------------------------------------------
# Lockdown 3 only
lag_max = 50
ccf_summary <-NA
for (i in 1:length(types_mobility)){
for (j in 1:length(region_list)){
start_date = lockdown_3_start
end_date = lockdown_3_end
mobility_place = types_mobility[i]
region_interest = region_list[j]
mob <- mobility_av %>% filter(region==region_interest, type_mobility==mobility_place, date>=lockdown_3_start, date<=lockdown_3_end)
reprod <- react_reprod_regional %>% filter(reg_char == region_interest, d_comb>=lockdown_3_start, d_comb<=lockdown_3_end )
ccf <- ccf(reprod$r , mob$mobility, lag.max=lag_max)
ccf_data <- as.data.frame(cbind(ccf$acf,ccf$lag))
colnames(ccf_data)[1:2]<-c("ccf","lag")
ccf_data$region <- region_interest
ccf_data$type_mobility <- mobility_place
ccf_summary <- rbind(ccf_summary, ccf_data)
}
}
ccf_summary
ccf_summary <- ccf_summary[-1,]
setwd("~/Desktop/Masters/Project/Analysis/Lags/Outputs/regional")
setwd("~/Desktop/Masters/Project/Analysis/Lags/Outputs/regional")
write.csv(ccf_summary,"ccf_summary_regional.png")
write.csv(ccf_summary,"ccf_summary_regional.csv")
ccf_summary %>% group_by(region,type_mobility)
ccf_summary %>% group_by(region,type_mobility) %>% summarise(max(lag))
ccf_summary %>% group_by(region,type_mobility) %>% summarise(max(ccf))
ccf_summary %>% group_by(region,type_mobility) %>% summarise(ccf_data$lag[which.max(ccf_data$ccf)]))
ccf_summary %>% group_by(region,type_mobility) %>% summarise(ccf_data$lag[which.max(ccf_data$ccf)])
ccf_summary %>% group_by(region,type_mobility) %>% summarise(ccf_summary$lag[which.max(ccf_summary$ccf)])
ccf_summary %>% group_by(region,type_mobility) %>% summarise(ccf_summary$lag,max)
ccf_summary %>% group_by(region,type_mobility) %>% summarise(ccf,max)
ccf_summary %>% group_by(region,type_mobility) %>% summarise(lag,max)
ccf_summary %>% group_by(region,type_mobility)
ccf_summary %>% group_by(region,type_mobility) %>% (max_ccf = max(ccf))
colnames(ccf_summary)
ccf_summary %>% group_by(region,type_mobility) %>% summarise(max_ccf = max(ccf))
ccf_summary %>% group_by(region,type_mobility) %>% summarise(max_ccf = max(ccf), min_ccf=min(ccf))
ccf_max_min <- ccf_summary %>% group_by(region,type_mobility) %>% summarise(max_ccf = max(ccf), min_ccf=min(ccf))
ccf_max_min
ccf_max_min <- ccf_summary %>% group_by(region,type_mobility) %>% summarise(max_ccf = max(ccf),max_lag=(which.max(ccf)) min_ccf=min(ccf))
ccf_max_min <- ccf_summary %>% group_by(region,type_mobility) %>% summarise(max_ccf = max(ccf),max_lag=(which.max(ccf)), min_ccf=min(ccf))
ccf_max_min
ccf_max_min <- ccf_summary %>% group_by(region,type_mobility) %>% summarise(max_ccf = max(ccf),max_lag=(lag[which.max(ccf)]),
min_ccf=min(ccf))
ccf_max_min
ccf_max_min <- ccf_summary %>% group_by(region,type_mobility) %>% summarise(max_ccf = max(ccf),max_lag=(lag[which.max(ccf)]),
min_ccf=min(ccf),min_lag=(lag[which.max(ccf)]))
ccf_max_min <- ccf_summary %>% group_by(region,type_mobility) %>% summarise(max_ccf = max(ccf),max_lag=(lag[which.max(ccf)]),
min_ccf=min(ccf),min_lag=(lag[which.min(ccf)]))
ccf_max_min
setwd("~/Desktop/Masters/Project/Analysis/Lags/Outputs/regional")
write.csv(ccf_max_min,"ccf_summary_min_max_regional.csv")
eng <- rgdal::readOGR(paste0("https://opendata.arcgis.com/datasets/",
"8d3a9e6e7bd445e2bdcc26cdf007eac7_4.geojson"))
countries <- rgdal::readOGR(paste0("https://opendata.arcgis.com/datasets/",
"92ebeaf3caa8458ea467ec164baeefa4_0.geojson"))
eng <- sf::st_as_sf(eng)
countries <- sf::st_as_sf(countries)
# UK <- countries[-1,]
names(eng)[3] <- "Region"
# names(UK)[3] <- "Region"
# UK$objectid <- 10:12
eng <- eng[-2]
# UK <- UK[c(1, 3, 9:11)]
# UK <- rbind(eng, UK)
eng$rgn15nm
# Template plot to use for maps of regions of England
library(RColorBrewer)
ggplot(eng, aes(fill = Region)) +
geom_sf() +
scale_fill_brewer(palette="Paired") +
theme_bw() +
guides(fill=guide_legend(title="Region"))+
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
legend.position = c(0.17,0.8),
legend.key = element_rect(fill = "transparent")
)
map_plot <- ggplot(eng, aes(fill = Region)) +
geom_sf() +
scale_fill_brewer(palette="Paired") +
theme_bw() +
guides(fill=guide_legend(title="Region"))+
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
legend.position = c(0.17,0.8),
legend.key = element_rect(fill = "transparent"),
panel.border = element_blank()
)
map_plot
setwd("~/Desktop/Masters/Project/Analysis/Descriptive/Ouputs")
setwd("~/Desktop/Masters/Project/Analysis/Descriptive/Ouputs")
ggsave("map_plot.png",mapPlot)
ggsave("map_plot.png",map_plot)
View(map_plot)
map_plot <- ggplot(eng, aes(fill = Region)) +
geom_sf() +
scale_fill_brewer(palette="Paired") +
theme_bw() +
guides(fill=guide_legend(title="Region"))+
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
legend.position = c(0.1,0.8),
legend.key = element_rect(fill = "transparent"),
panel.border = element_blank()
)
map_plot
setwd("~/Desktop/Masters/Project/Analysis/Descriptive/Ouputs")
ggsave("map_plot.png",map_plot)
map_plot <- ggplot(eng, aes(fill = Region)) +
geom_sf() +
scale_fill_brewer(palette="Paired") +
theme_bw() +
guides(fill=guide_legend(title="Region"))+
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
legend.position = c(0,0.8),
legend.key = element_rect(fill = "transparent"),
panel.border = element_blank()
)
map_plot <- ggplot(eng, aes(fill = Region)) +
geom_sf() +
scale_fill_brewer(palette="Paired") +
theme_bw() +
guides(fill=guide_legend(title="Region"))+
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
legend.position = c(0,0.8),
legend.key = element_rect(fill = "transparent"),
panel.border = element_blank(),
legend.text=element_text(size=12)
)
map_plot
map_plot <- ggplot(eng, aes(fill = Region)) +
geom_sf() +
scale_fill_brewer(palette="Paired") +
theme_bw() +
guides(fill=guide_legend(title=""))+
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
legend.position = c(0,0.8),
legend.key = element_rect(fill = "transparent"),
panel.border = element_blank(),
legend.text=element_text(size=14)
)
map_plot
map_plot <- ggplot(eng, aes(fill = Region)) +
geom_sf() +
scale_fill_brewer(palette="Paired") +
theme_bw() +
guides(fill=guide_legend(title=""))+
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
legend.position = c(0.05,0.8),
legend.key = element_rect(fill = "transparent"),
panel.border = element_blank(),
legend.text=element_text(size=14)
)
map_plot
map_plot <- ggplot(eng, aes(fill = Region)) +
geom_sf() +
scale_fill_brewer(palette="Paired") +
theme_bw() +
guides(fill=guide_legend(title=""))+
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
legend.position = c(0.05,0.8),
legend.key = element_rect(fill = "transparent"),
panel.border = element_blank(),
legend.text=element_text(size=15)
)
map_plot
map_plot <- ggplot(eng, aes(fill = Region)) +
geom_sf() +
scale_fill_brewer(palette="Paired") +
theme_bw() +
guides(fill=guide_legend(title=""))+
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
legend.position = c(0.05,0.5),
legend.key = element_rect(fill = "transparent"),
panel.border = element_blank(),
legend.text=element_text(size=15)
)
map_plot
map_plot <- ggplot(eng, aes(fill = Region)) +
geom_sf() +
scale_fill_brewer(palette="Paired") +
theme_bw() +
guides(fill=guide_legend(title=""))+
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.y = element_blank(),
axis.text.y = element_blank(),
legend.position = c(0.05,0.65),
legend.key = element_rect(fill = "transparent"),
panel.border = element_blank(),
legend.text=element_text(size=15)
)
map_plot
setwd("~/Desktop/Masters/Project/Analysis/Descriptive/Ouputs")
ggsave("map_plot.png",map_plot)
# Setup -------------------------------------------------------------------
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(tidyverse)
library(gtsummary)
library(zoo)
library(reshape2)
library(lme4)
library(gridExtra) # for grid.arrange
# Loading data ------------------------------------------------------------
google_overall <- read.csv("/Users/elliebloom/Desktop/Masters/Project/Data/Google/google_overall.csv")
# Filterting for GB dataset
google_gb <- google_overall %>% filter(sub_region_1=="") # Where there is no sub-region, the data is for GB overall
# Converting dates from string format to date
str(google_overall$date) # Dates are currently stored as characters
google_overall$date <- as.Date(google_overall$date,format="%Y-%m-%d")
str(google_overall$date)
# Adding key dates --------------------------------------------------------
bank_holidays <-as.Date(c("2020-01-01","2020-04-10","2020-04-13","2020-05-08",
"2020-05-25","2020-08-31","2020-12-25","2020-12-28",
"2021-01-01","2021-04-02","2021-04-05","2021-05-03",
"2021-05-31","2021-08-30","2021-12-27","2021-12-28",
"2022-01-03","2022-04-15","2022-04-18","2022-05-02"),
"%Y-%m-%d")
# Useful dates
lockdown_1_start <- as.Date("2020-03-26","%Y-%m-%d")
lockdown_1_end <- as.Date("2020-06-15","%Y-%m-%d")
lockdown_2_start <- as.Date("2020-11-05","%Y-%m-%d")
lockdown_2_end <- as.Date("2020-12-02","%Y-%m-%d")
lockdown_3_start <- as.Date("2021-01-06","%Y-%m-%d")
lockdown_3_end <- as.Date("2021-04-21","%Y-%m-%d")
google_overall$bank_holiday <- ifelse(google_overall$date %in% bank_holidays,1,0)
google_overall$bank_holiday <- as.factor(google_overall$bank_holiday)
# Adding days of the week into the google_gb dataset
google_overall$day <- weekdays(google_overall$date)
# Make into a factor
google_overall$day <- factor(google_overall$day)
# Sunday as reference category
google_overall$day <- relevel(google_overall$day, ref="Sunday")
str(google_overall$day)
# Filterting for GB dataset
google_gb <- google_overall %>% filter(sub_region_1=="") # Where there is no sub-region, the data is for GB overall
# Defining mobility types -------------------------------------------------
mobility_types <- c("retail_and_recreation_percent_change_from_baseline",
"grocery_and_pharmacy_percent_change_from_baseline", "parks_percent_change_from_baseline",
"transit_stations_percent_change_from_baseline", "workplaces_percent_change_from_baseline",
"residential_percent_change_from_baseline")
mobility_types_neat <- c("Retail and recreation",
"Grocery and pharmacy",
"Parks",
"Transit stations",
"Workplaces",
"Residential")
# For whole period - England ------------------------------------------------------
# Note that this is without the moving average
mobility_types_av <- c("retail_recreation_av",
"grocery_pharmacy_av", "parks_av", "transit_stations_av", "workplaces_av",
"residential_av")
# Add lockdown variables
google_england$lockdown1 <- as.factor(ifelse(google_england$date>=lockdown_1_start & google_england$date<=lockdown_1_end,1,0))
google_england$lockdown2 <- as.factor(ifelse(google_england$date>=lockdown_2_start & google_england$date<=lockdown_2_end,1,0))
google_england$lockdown3 <- as.factor(ifelse(google_england$date>=lockdown_3_start & google_england$date<=lockdown_3_end,1,0))
# Linear model for each mobility types
England_whole_summary <- NA
for (i in 1:length(mobility_types_av)){
period = "Whole period"
start_date = lockdown_1_start
end_date = lockdown_3_end
mobility_type <- mobility_types_av[i]
mobility_type_neat <- mobility_types_neat[i]
data <- google_england %>% filter(date>=start_date,date<= end_date)
data$days_since_start <- as.numeric(data$date - start_date)
model <- lm(eval(parse(text=mobility_types_av[i])) ~  days_since_start +lockdown1*days_since_start + lockdown2*days_since_start + lockdown3*days_since_start, data=data)
summary <- summary(model)$coef
summary <- cbind(summary,confint(model))
colnames(summary) <- c(paste0(mobility_type_neat,colnames(summary)[1]),
paste0(mobility_type_neat,colnames(summary)[2]),
paste0(mobility_type_neat,colnames(summary)[3]),
paste0(mobility_type_neat,colnames(summary)[4]),
paste0(mobility_type_neat,colnames(summary)[5]),
paste0(mobility_type_neat,colnames(summary)[6]))
England_whole_summary <- cbind(England_whole_summary,summary)
}
England_whole_summary <- England_whole_summary[,-1]
England_whole_summary
